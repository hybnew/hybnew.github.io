<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Garden 园丁</title>
  <subtitle>园丁</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hybnew.github.io/"/>
  <updated>2017-03-01T03:41:37.400Z</updated>
  <id>http://hybnew.github.io/</id>
  
  <author>
    <name>Rick Ho</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Object的 wait &amp; notify &amp; notifyAll 方法探索</title>
    <link href="http://hybnew.github.io/2017/03/01/Java-Object%E7%9A%84-wait-notify-notifyAll-%E6%96%B9%E6%B3%95%E6%8E%A2%E7%B4%A2/"/>
    <id>http://hybnew.github.io/2017/03/01/Java-Object的-wait-notify-notifyAll-方法探索/</id>
    <published>2017-03-01T03:25:33.000Z</published>
    <updated>2017-03-01T03:41:37.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>wait 和 notify/notifyAll 主要是用于线程间通信的方法，他们是Java  <code>Object</code> 的实例方法，所以可以用于各种引用类型。由于wait和notify/notifyAll必须在获取到monitor（锁）的区域内使用，所以，我们更多的是使用synchronized锁住线程共享的变量，并且在共享变量上做线程间通信。</p>
</blockquote>
<p>[TOC]</p>
<h4 id="关于wait和notify-notifyAll的使用"><a href="#关于wait和notify-notifyAll的使用" class="headerlink" title="关于wait和notify/notifyAll的使用"></a>关于wait和notify/notifyAll的使用</h4><h5 id="javadoc-reference"><a href="#javadoc-reference" class="headerlink" title="javadoc reference"></a>javadoc reference</h5><h4 id="wait方法的loop纠结"><a href="#wait方法的loop纠结" class="headerlink" title="wait方法的loop纠结"></a>wait方法的loop纠结</h4><h4 id="notify和notifyAll的区别"><a href="#notify和notifyAll的区别" class="headerlink" title="notify和notifyAll的区别"></a>notify和notifyAll的区别</h4>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;wait 和 notify/notifyAll 主要是用于线程间通信的方法，他们是Java  &lt;code&gt;Object&lt;/code&gt; 的实例方法，所以可以用于各种引用类型。由于wait和notify/notifyAll必须在获取到monitor（锁
    
    </summary>
    
    
  </entry>
  
</feed>
