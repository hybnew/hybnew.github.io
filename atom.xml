<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>十只橘猫九只胖</title>
  <subtitle>还有一只特别胖</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hybnew.github.io/"/>
  <updated>2017-03-01T05:47:39.280Z</updated>
  <id>http://hybnew.github.io/</id>
  
  <author>
    <name>Rick Ho</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本博客的入坑纪实-Hexo博客平台</title>
    <link href="http://hybnew.github.io/2017/03/01/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%85%A5%E5%9D%91%E7%BA%AA%E5%AE%9E-Hexo%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0/"/>
    <id>http://hybnew.github.io/2017/03/01/本博客的入坑纪实-Hexo博客平台/</id>
    <published>2017-03-01T05:47:39.000Z</published>
    <updated>2017-03-01T05:47:39.280Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java 线程的运行时异常处理-UncaughtExceptionHandler</title>
    <link href="http://hybnew.github.io/2017/03/01/java-%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-UncaughtExceptionHandler/"/>
    <id>http://hybnew.github.io/2017/03/01/java-线程的运行时异常处理-UncaughtExceptionHandler/</id>
    <published>2017-03-01T05:41:33.000Z</published>
    <updated>2017-03-01T08:48:37.740Z</updated>
    
    <content type="html"><![CDATA[<p>首先，有个问题，如果Java子线程发生异常会怎么样？实际上会导致该线程直接终止。<br>当年自己写了个线程模型大概是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Spring容器启动 (1)</div><div class="line">  -&gt; 主线程中启动一个子线程T，在while循环中去接收socket请求 (2)</div><div class="line">    -&gt; 收到一个请求，submit一个线程 (3)</div></pre></td></tr></table></figure>
<p>当时我一只担心步骤2的线程T会因为什么而挂掉，然后大家没办法上传文件。而当时完全不知道UncaughtExceptionHandler的存在，多希望有一丁点指导啊。</p>
<p>那么如何处理可能出现的异常而不至于线程直接挂掉呢？<br>第一，把整个run中的异常在内部捕获掉<br>第二，直接在线程中setUncaughtExceptionHandler,将异常处理与run分开。</p>
<p>其实，有的同学可能疑惑，为什么不能直接把整个线程用try-catch包裹起来。因为这本来就没有什么用，譬如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 普通线程即使使用try...catch也无法捕获到抛出的异常</div><div class="line">       try &#123;</div><div class="line">           Thread t = new Thread();</div><div class="line">           t.start();</div><div class="line">       &#125; catch (Exception e) &#123;</div><div class="line">           System.out.println(&quot;catch RunTimeException &quot;); // 不起作用</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>假设t是从线程x中 <code>new</code> 出来的，那么x称为t的父线程。而线程与线程间的运行本是异步的（当然如果不使用线程间通信机制的情况下），有可能x在t还没结束时先结束，这是有可能的，如果x不是主线程的话。 所以，try-catch在异步的线程中捕获是没有意义的。<br>正确的方法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">new Thread(new Runnable() &#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try&#123;//wrap all code</div><div class="line">            Integer.parseInt(&quot;sfasf&quot;);</div><div class="line">            System.out.println(0);</div><div class="line">        &#125;catch(...)&#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure></p>
<p>或者使用UncaughtExceptionHandler 捕获线程运行体的运行时异常，使用也很简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * 继承UncaughtExceptionHandler 接口</div><div class="line"> */</div><div class="line">class ErrHandler implements UncaughtExceptionHandler</div><div class="line">&#123;</div><div class="line">    public void uncaughtException(Thread t, Throwable e)</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;This is:&quot; + t.getName() + &quot;,Message:&quot; + e.getMessage());</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在线程中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">new Thread(new Runnable() &#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line"></div><div class="line">        Thread.currentThread().setUncaughtExceptionHandler(ErrHandler);</div><div class="line">        //Thread.currentThread().setUncaughtExceptionHandler((t, e) -&gt; &#123;</div><div class="line">        //    System.out.println(&quot;current thread is &quot; + t.getName() + &quot; &quot; + e.getMessage());</div><div class="line">        //&#125;);</div><div class="line">        Integer.parseInt(&quot;sfasf&quot;);</div><div class="line">        System.out.println(0);</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure></p>
<p>如果没有捕获异常，不会输出0，而有了handler则不影响下面的执行，会正常输出了。<br>或者是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Thread a = new Thread();</div><div class="line">a.setUncaughtExceptionHandler(ErrHandler);</div></pre></td></tr></table></figure></p>
<p>正如上面所写，在java 8中还可以用lamda表达式简化语法，用匿名handler代替。不过使用<code>a.setUEH(handler)</code>这种方式是策略模式的体现，更容易在需要的时候随时替换handler的实现，正如sort函数的Comparator参数一样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，有个问题，如果Java子线程发生异常会怎么样？实际上会导致该线程直接终止。&lt;br&gt;当年自己写了个线程模型大概是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;di
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HashMap 源码分析</title>
    <link href="http://hybnew.github.io/2017/03/01/HashMap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://hybnew.github.io/2017/03/01/HashMap-源码分析/</id>
    <published>2017-03-01T04:11:29.000Z</published>
    <updated>2017-03-01T04:11:29.901Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CocurrentHashMap 源码试解读</title>
    <link href="http://hybnew.github.io/2017/03/01/CocurrentHashMap-%E6%BA%90%E7%A0%81%E8%AF%95%E8%A7%A3%E8%AF%BB/"/>
    <id>http://hybnew.github.io/2017/03/01/CocurrentHashMap-源码试解读/</id>
    <published>2017-03-01T04:11:11.000Z</published>
    <updated>2017-03-01T04:11:11.231Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AbstractQueuedSynchronizer (AQS) 源码试解读</title>
    <link href="http://hybnew.github.io/2017/03/01/AbstractQueuedSynchronizer-AQS-%E6%BA%90%E7%A0%81%E8%AF%95%E8%A7%A3%E8%AF%BB/"/>
    <id>http://hybnew.github.io/2017/03/01/AbstractQueuedSynchronizer-AQS-源码试解读/</id>
    <published>2017-03-01T04:10:51.000Z</published>
    <updated>2017-03-01T04:10:51.032Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用Fork And Join框架计算Fibonacci数列</title>
    <link href="http://hybnew.github.io/2017/03/01/%E7%94%A8Fork-And-Join%E6%A1%86%E6%9E%B6%E8%AE%A1%E7%AE%97Fibonacci%E6%95%B0%E5%88%97/"/>
    <id>http://hybnew.github.io/2017/03/01/用Fork-And-Join框架计算Fibonacci数列/</id>
    <published>2017-03-01T04:08:50.000Z</published>
    <updated>2017-03-01T04:08:50.124Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java Object的 wait &amp; notify &amp; notifyAll 方法探索</title>
    <link href="http://hybnew.github.io/2017/03/01/Java-Object%E7%9A%84-wait-notify-notifyAll-%E6%96%B9%E6%B3%95%E6%8E%A2%E7%B4%A2/"/>
    <id>http://hybnew.github.io/2017/03/01/Java-Object的-wait-notify-notifyAll-方法探索/</id>
    <published>2017-03-01T03:25:33.000Z</published>
    <updated>2017-03-01T05:37:23.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>wait 和 notify/notifyAll 主要是用于线程间通信的方法，他们是Java  <code>Object</code> 的实例方法，所以可以用于各种引用类型。由于wait和notify/notifyAll必须在获取到monitor（锁）的区域内使用，所以，我们更多的是使用synchronized锁住线程共享的变量，并且在共享变量上做线程间通信。</p>
</blockquote>
<p>[TOC]</p>
<h4 id="关于wait和notify-notifyAll的使用"><a href="#关于wait和notify-notifyAll的使用" class="headerlink" title="关于wait和notify/notifyAll的使用"></a>关于wait和notify/notifyAll的使用</h4><h5 id="javadoc-reference"><a href="#javadoc-reference" class="headerlink" title="javadoc reference"></a>javadoc reference</h5><h4 id="wait方法的loop纠结"><a href="#wait方法的loop纠结" class="headerlink" title="wait方法的loop纠结"></a>wait方法的loop纠结</h4><h4 id="notify和notifyAll的区别"><a href="#notify和notifyAll的区别" class="headerlink" title="notify和notifyAll的区别"></a>notify和notifyAll的区别</h4>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;wait 和 notify/notifyAll 主要是用于线程间通信的方法，他们是Java  &lt;code&gt;Object&lt;/code&gt; 的实例方法，所以可以用于各种引用类型。由于wait和notify/notifyAll必须在获取到monitor（锁
    
    </summary>
    
    
  </entry>
  
</feed>
